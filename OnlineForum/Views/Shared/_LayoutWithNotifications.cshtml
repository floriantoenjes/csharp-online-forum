@using Microsoft.AspNetCore.Identity
@using OnlineForum.Services

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@inject NotificationService NotificationService

@{
    Layout = "_Layout";

    var notifications = NotificationService.GetNotificationsForUser(Convert.ToInt32(UserManager.GetUserId(User)));
    var notificationCount = notifications.Count(n => n.ReadAt == null);

}

@section UserInfoSection
{
    <ul class="navbar-nav">
        @if (SignInManager.IsSignedIn(User))
        {
            <li class="nav-item mr-4 position-relative">
                <div id="notification-bell" class="mt-1" style="cursor: pointer" data-toggle="notification-container">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-bell" viewBox="0 0 16 16">
                        <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z"/>
                    </svg>
                    
                    <span class="badge rounded-pill bg-primary text-white @(notificationCount == 0 ? "d-none" : "") ">
                        @notificationCount
                    </span>
                </div>
                <div class="bg-white border notification-container position-absolute" style="left: -10em; z-index: 15">
                    <ul class="list-unstyled p-4">
                        @* @foreach (var notification in notifications) *@
                        @* { *@
                        @*     <li> *@
                        @*         <p> *@
                        @*             @switch (notification.NotificationType) *@
                        @*             { *@
                        @*                 case NotificationType.NewPost: *@
                        @*                     @Html.ActionLink("New Post in Thread", *@
                        @*                         "GoToNotification", *@
                        @*                         "ControlPanel", *@
                        @*                         new {notificationId = notification.Id}, *@
                        @*                         new {@class=(string) (NotificationRead(notification) ? "read-notification" : "")}) *@
                        @*                     ; *@
                        @*                     break; *@
                        @* *@
                        @*                 case NotificationType.PrivateMessage: *@
                        @*                     @Html.ActionLink("New Private Message", *@
                        @*                         "GoToNotification", *@
                        @*                         "ControlPanel", *@
                        @*                         new {notificationId = notification.Id}, *@
                        @*                         new {@class=(string) (NotificationRead(notification) ? "read-notification" : "")}) *@
                        @*                     ; *@
                        @*                     break; *@
                        @*                 default: *@
                        @*                     throw new ArgumentOutOfRangeException(); *@
                        @*             } *@
                        @* *@
                        @*             @if (!NotificationRead(notification)) *@
                        @*             { *@
                        @*                 <span class="text-primary ml-2"> *@
                        @*                     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16"> *@
                        @*                         <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555zM0 4.697v7.104l5.803-3.558L0 4.697zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757zm3.436-.586L16 11.801V4.697l-5.803 3.546z"/> *@
                        @*                     </svg> *@
                        @*                 </span> *@
                        @*             } *@
                        @*             else *@
                        @*             { *@
                        @*                 <span class="text-secondary ml-2"> *@
                        @*                     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-open-fill" viewBox="0 0 16 16"> *@
                        @*                         <path d="M8.941.435a2 2 0 0 0-1.882 0l-6 3.2A2 2 0 0 0 0 5.4v.313l6.709 3.933L8 8.928l1.291.717L16 5.715V5.4a2 2 0 0 0-1.059-1.765l-6-3.2zM16 6.873l-5.693 3.337L16 13.372v-6.5zm-.059 7.611L8 10.072.059 14.484A2 2 0 0 0 2 16h12a2 2 0 0 0 1.941-1.516zM0 13.373l5.693-3.163L0 6.873v6.5z"/> *@
                        @*                     </svg> *@
                        @*                 </span> *@
                        @*             } *@
                        @*         </p> *@
                        @*         <hr> *@
                        @*     </li> *@
                        @* } *@
                        @if (notifications.Count > 0)
                        {
                            <li>
                                <button id="clearNotifications" class="btn btn-primary col-12">Clear Notifications</button>
                            </li>
                        }
                        else
                        {
                            <li class="text-center">No notifications</li>
                        }
                    </ul>
                </div>
            </li>
        }
        <partial name="_LoginPartial"/>
    </ul>
    @RenderSection("UserInfoSection", required: false)
}

@RenderBody()

@section Scripts
{
    <script>
        function setupSignalR()
        {
            const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        
            connection.on("ReceiveMessage", function (id, type) {
        
                const $notificationBell = $('#notification-bell .badge');
                const notificationCount = +$notificationBell.html() || 0;
        
                $notificationBell.html(notificationCount + 1);
                $notificationBell.removeClass('d-none');
        
                console.log(type);
                addNotification(id, type);
            });
        
            connection.start().then(function () {
                console.log('Connected!')
            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
        
        function setupNotificationDropdown() 
        {
            const $notificationContainer = $('.notification-container');
            
            $notificationContainer.hide();
            $('*[data-toggle="notification-container"]').click(() => {
        
                if ($notificationContainer.is(':hidden')) {
                    
                    const $overlay = $("<div id='overlay' style='position: absolute; width: 100vw; height: 100vh; z-index: 10; left: 0; top: 0;'></div>");
                    $overlay.click(function () {
                        $(this).remove();
                        $notificationContainer.hide();
                    });
                    
                    $(document.body).append($overlay);
                }
                
                $notificationContainer.toggle();
            });
        }
        
        
        setupSignalR();
        setupNotificationDropdown();    
    
    
        function markNotificationsRead(){
            $.post("@Url.Action("MarkAllNotificationsRead", "ControlPanel", new {userId = UserManager.GetUserId(User)})")
            .done(() => location.reload());
        }
        
        function addNotification(id, type, read) {
            console.log('Notification received', read);
        
            let $newNotification;
            
            switch (type) {
                
                case 0:
                case 'NewPost':
                    
                    $newNotification = $(`
                                                <li>
                                                    <p class="text-center">
                                                        <a href="@Url.Action("GoToNotification", "ControlPanel")/?notificationId=${id}">New Post in Thread!</a>
                                                        <span class="text-primary ml-2">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                                                                <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555zM0 4.697v7.104l5.803-3.558L0 4.697zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757zm3.436-.586L16 11.801V4.697l-5.803 3.546z"/>
                                                            </svg>
                                                        </span>
                                                    </p>
                                                </li>
                                                <hr>
                                            `);
                    
                    $('.notification-container ul').prepend($newNotification);
                        
                    break;
                    
                case 1:
                case 'PrivateMessage':
                    
                    $newNotification = $(`
                                                <li>
                                                    <p class="text-center">
                                                        <a href="@Url.Action("GoToNotification", "ControlPanel")/?notificationId=${id}">New Private Message!</a>
                                                        <span class="text-primary ml-2">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                                                                <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555zM0 4.697v7.104l5.803-3.558L0 4.697zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757zm3.436-.586L16 11.801V4.697l-5.803 3.546z"/>
                                                            </svg>
                                                        </span>
                                                    </p>
                                                </li>
                                                <hr>
                                            `);
                    
                    $('.notification-container ul').prepend($newNotification);
                        
                    break;
                    
                default:
                    throw new Error('Unknown notification type: ' + type);
            }   
            
            if (read) {
                $newNotification.find('a').addClass('read-notification');
                $newNotification.find('span').removeClass('text-primary').addClass('text-secondary');
            }
        }
        
        @foreach (var notification in notifications)
        {
            @if (notification.ReadAt != null)
            {
                @:addNotification("@notification.Id", "@notification.NotificationType", true);
            }
            else
            {
                @:addNotification("@notification.Id", "@notification.NotificationType", false);
            }
        }
        
        $('#clearNotifications').click(function (){
            markNotificationsRead();
        });
    </script>
    
    @RenderSection("Scripts", required: false)
}
